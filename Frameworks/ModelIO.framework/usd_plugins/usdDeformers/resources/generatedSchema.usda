#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
)

class BlendShape "BlendShape" (
    doc = "Describes a target blend shape."
)
{
    uint[] pointIndices = [] (
        doc = "<b>Optional property</b>. Indices into the original mesh that correspond to the values in points."
    )
    point3f[] points (
        doc = "<b>Required property</b>. Target shape positions."
    )
}

class "SkinDeformerAPI"
{
    matrix4d[] skinDeformer:bindTransforms (
        doc = "(World-space) joint transforms at bind time."
    )
    uint[] skinDeformer:componentsPerVertex (
        doc = "<b>Optional property</b>. Weights for each vertex. If missing, a constant number is assumed (number of elements in skinJointIndices divided by number of mesh vertices)."
    )
    uint[] skinDeformer:jointIndices (
        doc = "Indices into skinJoints. skinningComponentsPerVertex determines how many indices are stored per vertex."
    )
    float[] skinDeformer:jointWeights (
        doc = "Weights for the joints indexed by skinJointIndices. skinningComponentsPerVertex determines how many weights are stored per vertex."
    )
    matrix4d skinDeformer:meshBindTransform (
        doc = "(World-space) transform of our geometry at bind time."
    )
    rel skinDeformer:targetJoints = None (
        doc = "A list of joint xform prims that drive the skinned animation (e.g. rel targetJoints = [ </Skeleton/Pelvis>, </Skeleton/Pelvis/Chest>, ... ] )"
    )
}

class "MorphDeformerAPI"
{
    uint[] morphDeformer:channelTargetCounts (
        doc = """<b>Optional property</b>. Number of in-between morph targets for each channel. 
        A channel groups all in-between morph targets (including the final target) that are driven by the same weight. 
        Can be left empty if no in-between morph targets are used. If not empty, the sum of all elements has to equal the number of relations in morphTargetBlendShapes"""
    )
    float[] morphDeformer:channelTargetWeights (
        doc = "<b>Optional property</b>. Weight location of in-between morph target shape. Can be left empty if no in-between morph targets are used"
    )
    rel morphDeformer:targetBlendShapes = None (
        doc = "List of all target blend shapes (including in-betweens)."
    )
    float[] morphDeformer:weights (
        doc = """Weight of each morph channel.
        A channel groups all in-between morph targets (including the final target) that are driven by the same morph weight."""
    )
}

class DeformableMesh "DeformableMesh" (
    doc = "DEPRECATED: Adds skinning and morphing information to Mesh."
)
{
    int[] cornerIndices = [] (
        doc = "The vertex indices of all vertices that are sharp corners."
    )
    float[] cornerSharpnesses = [] (
        doc = """The sharpness values for corners: each corner gets a single
        sharpness value (Usd.Mesh.SHARPNESS_INFINITE for a perfectly sharp
        corner), so the size of this array must match that of
        'cornerIndices'"""
    )
    int[] creaseIndices = [] (
        doc = """The indices of all vertices forming creased edges.  The size of 
        this array must be equal to the sum of all elements of the 
        'creaseLengths' attribute."""
    )
    int[] creaseLengths = [] (
        doc = """The length of this array specifies the number of creases on the
        surface. Each element gives the number of (must be adjacent) vertices in
        each crease, whose indices are linearly laid out in the 'creaseIndices'
        attribute. Since each crease must be at least one edge long, each
        element of this array should be greater than one."""
    )
    float[] creaseSharpnesses = [] (
        doc = """The per-crease or per-edge sharpness for all creases
        (Usd.Mesh.SHARPNESS_INFINITE for a perfectly sharp crease).  Since
        'creaseLengths' encodes the number of vertices in each crease, the
        number of elements in this array will be either len(creaseLengths) or
        the sum over all X of (creaseLengths[X] - 1). Note that while
        the RI spec allows each crease to have either a single sharpness
        or a value per-edge, USD will encode either a single sharpness
        per crease on a mesh, or sharpnesses for all edges making up
        the creases on a mesh."""
    )
    uniform bool doubleSided = 0 (
        doc = """Although some renderers treat all parametric or polygonal
        surfaces as if they were effectively laminae with outward-facing
        normals on both sides, some renderers derive significant optimizations
        by considering these surfaces to have only a single outward side,
        typically determined by control-point winding order and/or 
        orientation.  By doing so they can perform \"backface culling\" to
        avoid drawing the many polygons of most closed surfaces that face away
        from the viewer.
        
        However, it is often advantageous to model thin objects such as paper
        and cloth as single, open surfaces that must be viewable from both
        sides, always.  Setting a gprim's doubleSided attribute to 
        \\c true instructs all renderers to disable optimizations such as
        backface culling for the gprim, and attempt (not all renderers are able
        to do so, but the USD reference GL renderer always will) to provide
        forward-facing normals on each side of the surface for lighting
        calculations."""
    )
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement.  Whenever any geometry-affecting attribute is authored
        for any gprim in a layer, extent must also be authored at the same
        timesample; failure to do so will result in incorrect bounds-computation.
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    token faceVaryingLinearInterpolation = "cornersPlus1" (
        allowedTokens = ["all", "none", "boundaries", "cornersOnly", "cornersPlus1", "cornersPlus2"]
        doc = '''Specifies how face varying data is interpolated.  Valid values
        are "all" (no smoothing), "cornersPlus1" (the default, Smooth UV),
        "none" (Same as "cornersPlus1" but does not infer the presence 
        of corners where two faceVarying edges meet at a single face), or 
        "boundaries" (smooth only near vertices that are not at a
        discontinuous boundary).

        See http://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#face-varying-interpolation-rules'''
    )
    int[] faceVertexCounts (
        doc = """Provides the number of vertices in each face of the mesh, 
        which is also the number of consecutive indices in 'faceVertexIndices'
        that define the face.  The length of this attribute is the number of
        faces in the mesh.  If this attribute has more than
        one timeSample, the mesh is considered to be topologically varying."""
    )
    int[] faceVertexIndices (
        doc = """Flat list of the index (into the 'points' attribute) of each
        vertex of each face in the mesh.  If this attribute has more than
        one timeSample, the mesh is considered to be topologically varying."""
    )
    int[] holeIndices = [] (
        doc = """The face indices (indexing into the 'faceVertexCounts'
        attribute) of all faces that should be made invisible."""
    )
    token interpolateBoundary = "edgeAndCorner" (
        allowedTokens = ["none", "edgeAndCorner", "edgeOnly"]
        doc = '''Specifies how interpolation boundary face edges are
        interpolated. Valid values are "none", 
        "edgeAndCorner" (the default), or "edgeOnly".'''
    )
    uint[] morphChannelTargetCounts (
        doc = """DEPRECATED: <b>Optional property</b>. Number of in-between morph targets for each channel. 
        A channel groups all in-between morph targets (including the final target) that are driven by the same weight. 
        Can be left empty if no in-between morph targets are used. If not empty, the sum of all elements has to equal the number of relations in morphTargetBlendShapes"""
    )
    float[] morphChannelTargetWeights (
        doc = "DEPRECATED: <b>Optional property</b>. Weight location of in-between morph target shape. Can be left empty if no in-between morph targets are used"
    )
    rel morphTargetBlendShapes = None (
        doc = "DEPRECATED: List of all target blend shapes (including in-betweens)."
    )
    float[] morphWeights (
        doc = """DEPRECATED: Weight of each morph channel.
        A channel groups all in-between morph targets (including the final target) that are driven by the same morph weight."""
    )
    normal3f[] normals (
        doc = """Provide orientation for individual points, which, depending on
        subclass, may define a surface, curve, or free points.  Note that in
        general you should not need or want to provide 'normals' for any
        Mesh that is subdivided, as the subdivision scheme will provide smooth
        normals.  'normals' is not a generic Primvar,
        but the number of elements in this attribute will be determined by
        its 'interpolation'.  See \\ref SetNormalsInterpolation()"""
    )
    uniform token orientation = "rightHanded" (
        allowedTokens = ["rightHanded", "leftHanded"]
        doc = "See: http://renderman.pixar.com/resources/current/rps/attributes.html#orientation-and-sides"
    )
    point3f[] points (
        doc = """The primary geometry attribute for all PointBased
        primitives, describes points in (local) space."""
    )
    color3f[] primvars:displayColor (
        doc = '''It is useful to have an "official" colorSet that can be used
        as a display or modeling color, even in the absence of any specified
        shader for a gprim.  DisplayColor serves this role; because it is a
        UsdGeomPrimvar, it can also be used as a gprim override for any shader
        that consumes a displayColor parameter.'''
    )
    float[] primvars:displayOpacity (
        doc = """Companion to displayColor that specifies opacity, broken
        out as an independent attribute rather than an rgba color, both so that
        each can be indepedently overridden, and because shaders rarely consume
        rgba parameters."""
    )
    rel proxyPrim = None (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = '''Purpose is a concept we have found useful in our pipeline for 
        classifying geometry into categories that can each be independently
        included or excluded from traversals of prims on a stage, such as
        rendering or bounding-box computation traversals.  The fallback
        purpose, default indicates that a prim has "no special purpose"
        and should generally be included in all traversals.  Subtrees rooted
        at a prim with purpose render should generally only be included
        when performing a "final quality" render.  Subtrees rooted at a prim
        with purpose proxy should generally only be included when 
        performing a lightweight proxy render (such as openGL).  Finally,
        subtrees rooted at a prim with purpose guide should generally
        only be included when an interactive application has been explicitly
        asked to "show guides". 
        
        In the previous paragraph, when we say "subtrees rooted at a prim",
        we mean the most ancestral or tallest subtree that has an authored,
        non-default opinion.  If the purpose of </RootPrim> is set to 
        "render", then the effective purpose of </RootPrim/ChildPrim> will
        be "render" even if that prim has a different authored value for
        purpose.  <b>See ComputePurpose() for details of how purpose 
        inherits down namespace</b>.
        
        As demonstrated in UsdGeomBBoxCache, a traverser should be ready to 
        accept combinations of included purposes as an input.
        
        Purpose render can be useful in creating "light blocker"
        geometry for raytracing interior scenes.  Purposes render and
        proxy can be used together to partition a complicated model
        into a lightweight proxy representation for interactive use, and a
        fully realized, potentially quite heavy, representation for rendering.
        One can use UsdVariantSets to create proxy representations, but doing
        so requires that we recompose parts of the UsdStage in order to change
        to a different runtime level of detail, and that does not interact
        well with the needs of multithreaded rendering. Purpose provides us with
        a better tool for dynamic, interactive complexity management.'''
    )
    matrix4d[] skinBindTransforms (
        doc = "DEPRECATED: (World-space) joint transforms at bind time."
    )
    uint[] skinComponentsPerVertex (
        doc = "DEPRECATED: <b>Optional property</b>. Weights for each vertex. If missing, a constant number is assumed (number of elements in skinJointIndices divided by number of mesh vertices)."
    )
    uint[] skinJointIndices (
        doc = "DEPRECATED: Indices into skinJoints. skinningComponentsPerVertex determines how many indices are stored per vertex."
    )
    float[] skinJointWeights (
        doc = "DEPRECATED: Weights for the joints indexed by skinJointIndices. skinningComponentsPerVertex determines how many weights are stored per vertex."
    )
    matrix4d skinMeshBindTransform (
        doc = "DEPRECATED: (World-space) transform of our geometry at bind time."
    )
    rel skinTargetJoints = None (
        doc = "DEPRECATED: A list of joint xform prims that drive the skinned animation (e.g. rel targetJoints = [ </Skeleton/Pelvis>, </Skeleton/Pelvis/Chest>, ... ] )"
    )
    uniform token subdivisionScheme = "catmullClark" (
        allowedTokens = ["catmullClark", "loop", "bilinear", "none"]
        doc = '''The subdivision scheme to be applied to the surface.  
        Valid values are "catmullClark" (the default), "loop", "bilinear", and
        "none" (i.e. a polymesh with no subdivision - the primary difference
        between schemes "bilinear" and "none" is that bilinearly subdivided
        meshes can be considered watertight, whereas there is no such guarantee
        for un-subdivided polymeshes, and more mesh features (e.g. holes) may
        apply to bilinear meshes but not polymeshes.  Polymeshes may be
        lighterweight and faster to render, depending on renderer and render
        mode.)'''
    )
    vector3f[] velocities (
        doc = """If provided, 'velocities' should be used by renderers to 
        compute motion blur for a given 'points' sample, rather than 
        interpolating to a neighboring 'points' sample.  This is the only
        reasonable means of specifying motion blur for topologically
        varying PointBased primitives.  It follows that the length of each
        'velocities' sample must match the length of the corresponding
        'points' sample."""
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

